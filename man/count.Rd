% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/count.R
\name{count}
\alias{count}
\alias{mem_count}
\title{Count integer points in a polytope}
\usage{
count(spec, dir = tempdir(), opts = "", quiet = TRUE, mpoly = TRUE)

mem_count(spec, dir = tempdir(), opts = "", quiet = TRUE, mpoly = TRUE)
}
\arguments{
\item{spec}{Specification, see details and examples}

\item{dir}{Directory to place the files in, without an ending /}

\item{opts}{Options for count; "" for a hyperplane
representation, "--vrep" for a vertex representation; see the
LattE manual at \url{http://www.math.ucdavis.edu/~latte}}

\item{quiet}{Show latte output?}

\item{mpoly}{When opts = "--ehrhart-polynomial", return the mpoly
version of it}

\item{...}{...}
}
\value{
The count.  If the count is a number has less than 10
  digits, an integer is returned.  If the number has 10 or more
  digits, an integer in a character string is returned. You may
  want to use the gmp package's as.bigz to parse it.
}
\description{
\code{count} uses LattE's count function to count the (integer)
lattice points in a polytope and compute Ehrhart polynomials.
}
\details{
The specification should be one of the following: (1) a character
string or strings containing an inequality in the mpoly
expression format (see examples), (2) a list of vertices, (3) a
list of A and b for the equation Ax <= b (see examples), or (4)
raw code for LattE's count program. If a character vector is
supplied, (1) and (4) are distinguished by the number of strings.

Behind the scenes, count works by writing a latte file and
running count on it.  If a specification other than a length one
character is given to it (which is considered to be the code),
count attempts to convert it into LattE code and then run count
on it.
}
\examples{
\dontrun{

spec <- c("x + y <= 10", "x >= 1", "y >= 1")
count(spec) # 45
count(spec, opts = "--dilation=10") # 3321
count(spec, opts = "--homog") # 45

# by default, the output from LattE is in
list.files(tempdir())
list.files(tempdir(), recursive = TRUE)

# ehrhart polynomials
count(spec, opts = "--ehrhart-polynomial")
count(spec, opts = "--ehrhart-polynomial", mpoly = FALSE)

# ehrhart series (raw since mpoly can't handle rational functions)
count(spec, opts = "--ehrhart-series")

# simplified ehrhart series - not yet implemented
#count(spec, opts = "--simplified-ehrhart-polynomial")

# first terms of the ehrhart series
count(spec, opts = "--ehrhart-taylor=1")
count(spec, opts = "--ehrhart-taylor=2")
count(spec, opts = "--ehrhart-taylor=3")
count(spec, opts = "--ehrhart-taylor=4")

# multivariate generating function
count(spec, opts = "--multivariate-generating-function")


# by vertices
spec <- list(c(1,1), c(10,1), c(1,10), c(10,10))
count(spec)
count(spec, opts = "--vrep")

code <- "
5 3
1 -1  0
1  0 -1
1 -1 -1
0  1  0
0  0  1
"
count(code)


# for Ax <= b, see this example from the latte manual p.10
A <- matrix(c(
   1,  0,
   0,  1,
   1,  1,
  -1,  0,
   0, -1
), nrow = 5, byrow = TRUE)
b <- c(1, 1, 1, 0, 0)
count(list(A = A, b = b))










}

}

